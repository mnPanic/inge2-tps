// Ej 8c
const MAX = 15
range NUM = 2..MAX
set S = {[NUM],eos}

// Pipe process buffers elements from set S:
PIPE = (put[x:S] -> PIPE[x]),
PIPE[x:S] = (
	put[y:S] -> (get[x] -> PIPE[y]) |
	get[x] -> PIPE
).

// GEN process outputs numbers from 2 to MAX followed by the signal eos:
GEN = GEN[2],
GEN[x:NUM] = (
    out.put[x]-> if x<MAX
    then GEN[x+1]
    else (out.put.eos->end->GEN)
).

/*initialize from the first input from prev stage */
FILTER = (
    in.get[p:NUM] -> prime[p] -> FILTER[p] |
    in.get.eos -> ENDFILTER
),

/*filter all inputs that are multiples of p*/
FILTER[p:NUM] = (
    in.get[x:NUM]-> if x%p!=0
        then (out.put[x]->FILTER[p])
        else FILTER[p]
    | in.get.eos->ENDFILTER
),

/*terminate filter on eos*/
ENDFILTER = (out.put.eos -> end -> FILTER).

||PRIMES(N=4)=
    (gen:GEN
    || pipe[0..N-1]:PIPE
    || filter[0..N-1]:FILTER)
    /{
        pipe[0]/gen.out,
        pipe[i:0..N-1]/filter[i].in,
        pipe[i:1..N-1]/filter[i-1].out,
        end/{filter[0..N-1].end,gen.end}
    }.