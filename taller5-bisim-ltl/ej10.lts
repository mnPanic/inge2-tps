// leader election in a synchronous ring
set UID = {[19],[14],[7],[2]}
const N = #UID
set M = {null,msg.UID}
set Status = {unknown, leader}

// links or channels hold at most a single message
CHAN = (put[m:M] -> get[m] -> CHAN).

// the synchronous model proceeds in two steps
ROUND = (step1 -> step2 -> ROUND).

// the processes
PROCESS(U=1)
    = (init[U]->STATE['unknown]['msg[U]]),

STATE[status:Status][send:M]
    = (step1 -> put[send] -> STATE[status][send]
    | step2 ->
        (get.null -> DSTATE[status]['null]
        |get.msg[v:UID] ->
        if (v>U) then
            DSTATE[status]['msg[v]]
        else if (v==U) then
            DSTATE['leader]['null]
        else
            DSTATE[status]['null]
    )
),

DSTATE[status:Status][send:M]
    = ([send]->[status]->STATE[status][send]).

||LCR = (ROUND
    || chan[1..N]:CHAN
    || proc[i:1..N]:PROCESS(@(UID,i-1))
    )/{
    forall[i:1..N] {
        proc[i].get/chan[i].get,
        proc[i].put/chan[i%N+1].put,
        step1/proc[i].step1,
        step2/proc[i].step2
        }
    }.

// Propiedad que verifica que una vez declarado un líder,
// ningún otro nodo se declara como líder.
property ObsOnlyOneLeader = (
	proc[i:1..N].leader -> LeaderFound[i]
),

LeaderFound[i:1..N] = (proc[i].leader -> LeaderFound[i]).  

||LCR_OBS = (LCR || ObsOnlyOneLeader).
